---
title: "Lab 2: EDA and data visualization"
author: "Toufic Ayoub"
date: today
date-format: "DD/MM/YY"
format: 
    pdf:
      toc: false
---


```{r, warning=FALSE, message=FALSE}
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr)
library(visdat) 
library(janitor)
library(lubridate)
library(ggrepel)
```

# Lab Exercises

```{r}
res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") 
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()

delay_2022 <- get_resource(delay_2022_ids)
delay_2022 <- clean_names(delay_2022)
delay_2022 <- delay_2022 |> distinct()
delay_2022 <- delay_2022 |> filter(line %in% c("BD", "YU", "SHP", "SRT"))
```

## 1. Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`

```{r}
stationDelays <- delay_2022 |>
                  group_by(station) |>
                  summarize(mean_min_delay = mean(min_delay, na.rm = T), line) |>
                  arrange(desc(mean_min_delay))
                  
ggplot(data = stationDelays[1:5,], aes(x=station, y=mean_min_delay)) + 
  geom_bar(stat = 'identity') + facet_grid(~line) + 
  theme(axis.text.x = element_text(angle = 90))

```

## 2. Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014. 
  
  
```{r, warning=FALSE, message=FALSE}
res <- list_package_resources("f6651a40-2f52-46fc-9e04-b760c16edd5c")
mayor_2014_ids <- res |> filter(name=="campaign-contributions-2014-data") |> 
                    select(id) |> 
                    pull()

mayor_2014 <- get_resource(mayor_2014_ids)[[2]]
```
    
## 3. Clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)

```{r}
colnames(mayor_2014) = mayor_2014[1,]
mayor_2014 = mayor_2014[-1,]
mayor_2014 = clean_names(mayor_2014)
```

## 4. Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.


There are many missing values, for example, contributors' addresses and their relationship to the candidate are predominantly missing all of their values. It would be nice to have these values for easier filtering but the meat and bones of the data is still there even if these columns are completely ignored.


The contribution amount attribute is encoded as a character vector. We obviously would like this to be numeric, so this change is made. 

```{r}
skim(mayor_2014)

mayor_2014 = mayor_2014 |>
              mutate(numeric_contribution_amount = as.double(contribution_amount))
```


## 5. Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data. 
```{r}
findoutlier <- function(x) {
  return(x < quantile(x, .25) - 1.5*IQR(x) | x > quantile(x, .75) + 1.5*IQR(x))
}
```

```{r}
mayor_2014_outlier = mayor_2014 |> 
                        mutate(outlier = ifelse(findoutlier(numeric_contribution_amount),
                                                numeric_contribution_amount, NA))
```

```{r}
mayor_2014_outlier |>
  filter(!is.na(outlier)) |>
  group_by(candidate) |>
  summarize(outlier_count = length(outlier))
```

Around 67% of the outliers are associated with large contributions made towards John Tory. Mr. Tory was the winner of the 2014 election. 

```{r}
mayor_2014_outlier |> 
  filter(is.na(outlier)) |>
  ggplot(aes(x=numeric_contribution_amount)) + geom_histogram(bins = 13)
```


## 6. List the top five candidates in each of these categories:
### - total contributions
### - mean contribution
### - number of contributions
    
```{r}
mayor_2014_summary = mayor_2014 |>
                      group_by(contributors_name) |>
                      summarize( total_cont = sum(numeric_contribution_amount), 
                        mean_cont = mean(numeric_contribution_amount), num_cont = 
                      length(numeric_contribution_amount))


mayor_2014_summary_TC = mayor_2014_summary[,c(1,2)] |>
                        arrange(desc(total_cont))

mayor_2014_summary_MC = mayor_2014_summary[,c(1,3)] |>
                          arrange(desc(mean_cont))

mayor_2014_summary_NC = mayor_2014_summary[,c(1,4)] |>
                          arrange(desc(num_cont))
```
```{r}
head(mayor_2014_summary_TC)
head(mayor_2014_summary_MC)
head(mayor_2014_summary_NC)
```

    
## 7. Repeat 6 but without contributions from the candidates themselves.

```{r}
mayor_2014_summary_b = mayor_2014 |> 
                        group_by(contributors_name) |>
                        filter(contributors_name != candidate) |>
                        summarize( total_cont = sum(numeric_contribution_amount), 
                          mean_cont = mean(numeric_contribution_amount), num_cont =
                          length(numeric_contribution_amount))

mayor_2014_summary_TCb = mayor_2014_summary_b[,c(1,2)] |>
                        arrange(desc(total_cont))

mayor_2014_summary_MCb = mayor_2014_summary_b[,c(1,3)] |>
                          arrange(desc(mean_cont))

mayor_2014_summary_NCb = mayor_2014_summary_b[,c(1,4)] |>
                          arrange(desc(num_cont))
```
```{r}
head(mayor_2014_summary_TCb)
head(mayor_2014_summary_MCb)
head(mayor_2014_summary_NCb)
```


## 8. How many contributors gave money to more than one candidate? 

```{r}
mayor_2014_unique = mayor_2014 |>
                      group_by(contributors_name) |>
                      unique() |>
                      summarize(unique_contributions = length(candidate)) |>
                      filter(unique_contributions > 1)

numMoreThanOne = dim(mayor_2014_unique)[1]
```

There were `r numMoreThanOne` contributors who gave money to more than one candidate.
